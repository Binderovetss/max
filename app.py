import gevent.monkey
gevent.monkey.patch_all()  # ‚úÖ Monkey Patch –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏!

import os
import requests
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})  # ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
socketio = SocketIO(app, async_mode="gevent", cors_allowed_origins="*")  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π WebSocket

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Render
if TELEGRAM_BOT_TOKEN is None or CHAT_ID is None:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
else:
    CHAT_ID = int(CHAT_ID)  # ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –∫ int
    print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:10]}...")
    print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω CHAT_ID (—Ç–∏–ø {type(CHAT_ID)}): {CHAT_ID}")

@app.route('/send-to-telegram', methods=['POST'])
def send_to_telegram():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram"""
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        if TELEGRAM_BOT_TOKEN is None or CHAT_ID is None:
            print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 500

        user_info = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–ù–µ—Ç')}"
        
        payload = {
            "chat_id": CHAT_ID,
            "text": user_info
        }

        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {payload}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        response = requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)
        
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

        if response.status_code != 200:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram", "telegram_response": response.text}), 500

        return jsonify({"status": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"error": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Gunicorn...")
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), allow_unsafe_werkzeug=True)
