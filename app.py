import eventlet
eventlet.monkey_patch()

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO
import requests
import time
import os

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": ["https://www.nastyl.shop"]}})  # ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ —Å nastyl.shop
socketio = SocketIO(app, cors_allowed_origins="https://www.nastyl.shop")

# üîπ Telegram Bot Config
TELEGRAM_BOT_TOKEN = os.getenv("7368319072:AAGRGJU9NqchsjSMGHdVSrKGZEXYfyyRiUE")
CHAT_ID = os.getenv("294154587")

@app.route('/send-to-telegram', methods=['POST'])
def send_to_telegram():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram"""
    data = request.json
    user_id = str(int(time.time()))

    user_info = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–ù–µ—Ç')}"

    keyboard = {
        "inline_keyboard": [
            [{"text": "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", "callback_data": f"redirect_sms:{user_id}"}]
        ]
    }

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": user_info,
        "reply_markup": keyboard
    }

    print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram: {payload}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    try:
        response = requests.post(telegram_url, json=payload)
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram"}), 500

    return jsonify({"status": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", "user_id": user_id})

@app.route('/callback', methods=['POST'])
def handle_callback():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    data = request.json
    print(f"üì© –ü–æ–ª—É—á–µ–Ω callback –æ—Ç Telegram: {data}")

    if "callback_query" not in data:
        print("‚ùå –û—à–∏–±–∫–∞: –í callback-–∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'callback_query'!")
        return jsonify({"error": "callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400

    callback_query = data["callback_query"]
    callback_data = callback_query.get("data")

    if not callback_data:
        print("‚ùå –û—à–∏–±–∫–∞: –í callback-–∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'data'!")
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data"}), 400

    try:
        action, user_id = callback_data.split(":")
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data!")
        return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data"}), 400

    if action == "redirect_sms":
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        socketio.emit('redirect', {'user_id': user_id, 'url': "https://www.cikava-kava.com.ua/remont-stakanu-bojlera-kavomashyny-delonghi-pokrokovyj-gid/"})

        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": callback_query["message"]["chat"]["id"],
            "text": f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω!"
        }

        response = requests.post(telegram_url, json=payload)
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")

    return jsonify({"message": "‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"})

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Gunicorn...")
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), allow_unsafe_werkzeug=True)
